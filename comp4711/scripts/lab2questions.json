[
    {
        "question": "What is the name of the browser developer tools tab that allows you to test JavaScript code snippets?",
        "choices": {
            "1": "Elements",
            "2": "Console",
            "3": "Sources",
            "4": "Network"
        },
        "answer": 2
    },
    {
        "question": "What does the \"defer\" tag do in an HTML &ltscript&gt element?",
        "choices": {
            "1": "Defers loading of JavaScript code until all HTML elements have been loaded",
            "2": "Skips this &ltscript&gt element until all other &ltscript&gt elements have been loaded",
            "3": "Defers loading of all HTML elements until all JavaScript code has been loaded and run",
            "4": "Loads this &ltscript&gt element before all other &ltscript&gt elements"
        },
        "answer": 1
    },
    {
        "question": "What is the output of the following code?<div class=\"quiz-question\"><p><span style=\"color: blue\">let</span> arr = [5, 3, 1, 2, 4, 1, 7, 9, 0, 8];<br><br>for (<span style=\"color: blue\">let</span> i = 0; i &lt 10; i++) {<br>&nbsp&nbsp&nbsp&nbsp if (i &lt 5)<br>&nbsp&nbsp&nbsp&nbsp console.log(arr[i] + i);<br>}</p></div>",
        "choices": {
            "1": "01234",
            "2": "32356",
            "3": "53124",
            "4": "54358"
        },
        "answer": 4
    },
    {
        "question": "How does an anonymous function expression differ from a normal anonymous function?",
        "choices": {
            "1": "An anonymous function expression stores its result in a variable",
            "2": "An anonymous function expression is executed immediately after it has been declared",
            "3": "An anonymous function expression cannot be explicitly referenced",
            "4": "An anonymous function expression has access to both global and local scope variables"
        },
        "answer": 2
    },
    {
        "question": "Which of the following methods are valid examples of object property access in JavaScript?<div class=\"quiz-question\"><p>1) <span style=\"color: blue\">let</span> val = object.property;<br>2) <span style=\"color: blue\">let</span> val = object[\"property\"];</p></div>",
        "choices": {
            "1": "Method 1 is valid and method 2 is not valid",
            "2": "Method 2 is valid and method 1 is not valid",
            "3": "Method 1 and method 2 are both valid",
            "4": "Method 1 and method 2 are both invalid"
        },
        "answer": 3
    },
    {
        "question": "What does the <strong>this</strong> keyword refer to in JavaScript?",
        "choices": {
            "1": "the Document Object Model (DOM)",
            "2": "the object <strong>this</strong> belongs to",
            "3": "the browser client",
            "4": "the programmer who wrote the code"
        },
        "answer": 2
    },
    {
        "question": "What does the JavaScript Global object look like in the browser window?",
        "choices": {
            "1": "[object Window]",
            "2": "[Global Object]",
            "3": "[object]",
            "4": "[global Window]"
        },
        "answer": 1
    },
    {
        "question": "What does JavaScript strict mode do to binding the <strong>this</strong> keyword?",
        "choices": {
            "1": "makes it null",
            "2": "attaches it to the DOM",
            "3": "makes it undefined",
            "4": "does nothing"
        },
        "answer": 3
    },
    {
        "question": "What does the <strong>this</strong> keyword refer to in a JavaScript Event Handler?",
        "choices": {
            "1": "the HTML element that <strong>this</strong> is passing to",
            "2": "the HTML element that received the event",
            "3": "the Global object",
            "4": "the DOM"
        },
        "answer": 2
    },
    {
        "question": "When writing a function in a JavaScript object declaration, what does <strong>this</strong> refer to?",
        "choices": {
            "1": "the DOM",
            "2": "the object Window",
            "3": "the function the object is declared in",
            "4": "the object the function is declared in"
        },
        "answer": 4
    },
    {
        "question": "What is the top level object in the Browser Object Model (BOM)?",
        "choices": {
            "1": "the window",
            "2": "the wall",
            "3": "the Global object",
            "4": "the browser"
        },
        "answer": 1
    },
    {
        "question": "What is the difference between the document.querySelector() and document.querySelectorAll() functions?",
        "choices": {
            "1": "querySelector() can only be used to select via element id",
            "2": "querySelectorAll() retrieves all elements with the associated tags",
            "3": "querySelector() retrieves a single record from a database",
            "4": "querySelectorAll() selects all nodes in the DOM"
        },
        "answer": 2
    },
    {
        "question": "How do you prevent the default behaviour of an event object from triggering?",
        "choices": {
            "1": "Use the preventDefault() function on the element object",
            "2": "Use the setDefault attribute on the event object to \"none\"",
            "3": "Use the setDefault attribute on the element object to \"none\"",
            "4": "Use the preventDefault() function on the event object"
        },
        "answer": 4
    },
    {
        "question": "Which JavaScript function allows you to attach multiple event handler functions to an event object?",
        "choices": {
            "1": "addListenerEvent()",
            "2": "addEvent()",
            "3": "addListener()",
            "4": "addEventListener()"
        },
        "answer": 4
    },
    {
        "question": "What is the difference between the <strong>break</strong> and <strong>continue</strong> loop statements?",
        "choices": {
            "1": "<strong>break</strong> ends the current loop and moves to the next statement while <strong>continue</strong> skips the current loop iteration",
            "2": "<strong>break</strong> stops the script from running while <strong>continue</strong> restarts the script where the breaking call was made",
            "3": "<strong>break</strong> skips the current loop iteration while <strong>continue</strong> ends the current loop and moves to the next statement",
            "4": "<strong>break</strong> pauses the loops iteration while <strong>continue</strong> restarts the loops iteration where the breaking call was made"
        },
        "answer": 1
    }
]